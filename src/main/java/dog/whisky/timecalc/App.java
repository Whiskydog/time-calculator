/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dog.whisky.timecalc;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.*;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.*;

public class App {
	public static void main(String[] args) {
		String osName = System.getProperty("os.name");
		System.out.println("OS Name: " + osName);
		String lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName();
		if (osName.toLowerCase().contains("linux")) {
			lookAndFeel = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
		} else if (osName.toLowerCase().contains("windows")) {
			lookAndFeel = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
		}
		try {
			UIManager.setLookAndFeel(lookAndFeel);
		} catch(Exception exception) { System.out.println(exception); }

		new TimeCalculator();
	}
}

class TimeCalculator extends JFrame {
	private static final long serialVersionUID = 1L;
	private static final String[] timeNames = { "year", "month", "day", "hour", "minute", "second" };
	
	private Integer[] timeValues = { 0, 0, 0, 0, 0, 0 };
	private CalendarPanel fCalendarPanel;
	private CalendarPanel sCalendarPanel;

	TimeCalculator() {
		ArrayList<Image> imageList = new ArrayList<Image>();
		try {
            imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon512.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon256.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon128.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon64.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon32.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon24.png")));
			imageList.add(ImageIO.read(getClass().getClassLoader().getResource("icon16.png")));
		} catch (IOException exception) { System.out.println(exception); }
		setIconImages(imageList);
		setTitle("Time Calculator");
		fCalendarPanel = new CalendarPanel();
		sCalendarPanel = new CalendarPanel();

		add(new CenterLabel("Date 1"));
		add(fCalendarPanel);
		add(new CenterLabel("Date 2"));
		add(sCalendarPanel);

		CenterLabel resultLabel = new CenterLabel(getResultText());
		CenterLabel verboseLabel = new CenterLabel("...");

		JButton resultButton = new JButton("Calculate");
		resultButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		resultButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				calculatePeriod();
				resultLabel.setText(getResultText());
				verboseLabel.setText(getVerboseResultText());
			}
		});

		add(resultButton);
		add(resultLabel);
		add(verboseLabel);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(540, 200);
		setMinimumSize(getSize());
		setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		setVisible(true);
	}

	void calculatePeriod() {
		LocalDateTime fDate = fCalendarPanel.getLocalDateTime();
		LocalDateTime sDate = sCalendarPanel.getLocalDateTime();
		timeValues[0] = Math.abs(Period.between(fDate.toLocalDate(), sDate.toLocalDate()).getYears());
		timeValues[1] = Math.abs(Period.between(fDate.toLocalDate(), sDate.toLocalDate()).getMonths());
		timeValues[2] = Math.abs(Period.between(fDate.toLocalDate(), sDate.toLocalDate()).getDays());
		timeValues[3] = Math.abs((int)fDate.until(sDate, ChronoUnit.HOURS)) % 24;
		timeValues[4] = Math.abs((int)fDate.until(sDate, ChronoUnit.MINUTES)) % 60;
		timeValues[5] = Math.abs((int)fDate.until(sDate, ChronoUnit.SECONDS)) % 60;
	}

	String getResultText() {
		return String.format("%04d:%02d:%02d %02d:%02d:%02d", (Object[])timeValues);
	}

	String getVerboseResultText() {
		String text = "";
		for (int i = 0; i < timeValues.length; i++) {
			if (timeValues[i] != 0) {
				text += String.format("%d %s, ", timeValues[i], 
					timeValues[i] > 1 ? timeNames[i] + "s" : timeNames[i]);
			}
		}

		try {
			return text.substring(0, text.length() - 2);
		} catch (IndexOutOfBoundsException exception) {
			return "...";
		}
	}
}

class CalendarPanel extends JPanel {
	static final long serialVersionUID = 1L;

	private GregorianCalendar calendar;
	private JComboBox<Integer> dateBox;
	private JComboBox<Integer> monthBox;
	private JComboBox<Integer> yearBox;

	private JComboBox<String> hourBox;
	private JComboBox<String> minBox;
	private JComboBox<String> scndBox;

	CalendarPanel() {
		calendar = new GregorianCalendar();
		dateBox = new JComboBox<Integer>();
		monthBox = new JComboBox<Integer>();
		yearBox = new JComboBox<Integer>();

		hourBox = new JComboBox<String>();
		minBox = new JComboBox<String>();
		scndBox = new JComboBox<String>();

		for (int i = 1; i <= calendar.getActualMaximum(Calendar.DAY_OF_MONTH); i++) {
			dateBox.addItem(i);
		}
		for (int i = 0; i <= calendar.getActualMaximum(Calendar.MONTH); i++) {
			monthBox.addItem(i+1);
		}
		for (int i = 1492; i <= calendar.get(Calendar.YEAR); i++) {
			yearBox.addItem(i);
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.HOUR_OF_DAY); i++) {
			hourBox.addItem(String.format("%02d", i));
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.MINUTE); i++) {
			minBox.addItem(String.format("%02d", i));
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.SECOND); i++) {
			scndBox.addItem(String.format("%02d", i));
		}

		setBoxesToCalendar();

		dateBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.DATE, (int)e.getItem());
				}
			}
		});
		monthBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.MONTH, monthBox.getSelectedIndex());
					checkMaximumDate();
				}
			}
		});
		yearBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.YEAR, (int)e.getItem());
					checkMaximumDate();
				}
			}
		});

		hourBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.HOUR_OF_DAY, hourBox.getSelectedIndex());
				}
			}
		});
		minBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.MINUTE, minBox.getSelectedIndex());
				}
			}
		});
		scndBox.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					calendar.set(Calendar.SECOND, scndBox.getSelectedIndex());
				}
			}
		});

		add(dateBox);
		add(monthBox);
		add(yearBox);
		add(Box.createRigidArea(new Dimension(10, 0)));
		add(hourBox);
		add(minBox);
		add(scndBox);

		JButton nowButton = new JButton("Now");
		nowButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		nowButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				calendar.setTime(new Date());
				setBoxesToCalendar();
			}
		});

		add(Box.createRigidArea(new Dimension(20, 0)));
		add(nowButton);
	}

	private void checkMaximumDate() {
		calendar.set(Calendar.DATE, 1);
		if (dateBox.getItemCount() > calendar.getActualMaximum(Calendar.DATE)) {
			int i = dateBox.getItemCount() - calendar.getActualMaximum(Calendar.DATE);
			for (; i > 0; i--) {
				dateBox.removeItemAt(dateBox.getItemCount()-1);
			}
		} else if (dateBox.getItemCount() < calendar.getActualMaximum(Calendar.DATE)) {
			for (int i = dateBox.getItemCount()+1; i <= calendar.getActualMaximum(Calendar.DATE); i++) {
				dateBox.addItem(i);
			}
		}
		calendar.set(Calendar.DATE, (int)dateBox.getSelectedItem());
	}

	private void setBoxesToCalendar() {
		dateBox.setSelectedItem(calendar.get(Calendar.DATE));
		monthBox.setSelectedIndex(calendar.get(Calendar.MONTH));
		yearBox.setSelectedItem(calendar.get(Calendar.YEAR));
		hourBox.setSelectedIndex(calendar.get(Calendar.HOUR_OF_DAY));
		minBox.setSelectedIndex(calendar.get(Calendar.MINUTE));
		scndBox.setSelectedIndex(calendar.get(Calendar.SECOND));
	}

	long getTimeInMillis() {
		return calendar.getTime().getTime();
	}

	Date getDate() {
		return calendar.getTime();
	}

	LocalDateTime getLocalDateTime() {
		return LocalDateTime.of(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), 
			calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND)/*, calendar.get(Calendar.MILLISECOND) * 1000000*/);
	}
}

class CenterLabel extends JLabel {
	static final long serialVersionUID = 1L;

	CenterLabel(String text) {
		super(text);
		setAlignmentX(Component.CENTER_ALIGNMENT);
	}
}
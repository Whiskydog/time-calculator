/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package whiskydog.timecalc;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.*;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.*;

public class App {
	public static void main(String[] args) {
		String osName = System.getProperty("os.name");
		System.out.println("OS Name: " + osName);
		String lookAndFeel = UIManager.getCrossPlatformLookAndFeelClassName();
		if (osName.toLowerCase().contains("linux")) {
			lookAndFeel = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
		} else if (osName.toLowerCase().contains("windows")) {
			lookAndFeel = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
		}
		try {
			UIManager.setLookAndFeel(lookAndFeel);
		} catch(Exception exception) { exception.printStackTrace(); }

		new TimeCalculator();
	}
}

class TimeCalculator extends JFrame {
	private static final long serialVersionUID = 1L;
	private static final String[] timeNames = { "year", "month", "day", "hour", "minute", "second" };
	
	private final Long[] timeValues = { 0L, 0L, 0L, 0L, 0L, 0L };
	private final CalendarPanel fCalendarPanel;
	private final CalendarPanel sCalendarPanel;

	TimeCalculator() {
		ArrayList<Image> imageList = new ArrayList<>();
		try {
            imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon512.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon256.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon128.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon64.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon32.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon24.png"))));
			imageList.add(ImageIO.read(Objects.requireNonNull(getClass().getClassLoader().getResource("icon16.png"))));
		} catch (IOException exception) { exception.printStackTrace(); }
		setIconImages(imageList);
		setTitle("Time Calculator");
		fCalendarPanel = new CalendarPanel(1492);
		sCalendarPanel = new CalendarPanel(1492);

		add(new CenterLabel("Date 1"));
		add(fCalendarPanel);
		add(new CenterLabel("Date 2"));
		add(sCalendarPanel);

		CenterLabel resultLabel = new CenterLabel(getResultText());
		CenterLabel verboseLabel = new CenterLabel("...");

		JButton resultButton = new JButton("Calculate");
		resultButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		resultButton.addActionListener(e -> {
			calculatePeriod();
			resultLabel.setText(getResultText());
			verboseLabel.setText(getVerboseResultText());
		});

		add(resultButton);
		add(resultLabel);
		add(verboseLabel);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(540, 200);
		setMinimumSize(getSize());
		setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
		setLocationRelativeTo(null);
		setVisible(true);
	}

	void calculatePeriod() {
		LocalDateTime fDate = fCalendarPanel.getLocalDateTime();
		LocalDateTime sDate = sCalendarPanel.getLocalDateTime();
		Period period = Period.between(fDate.toLocalDate(), sDate.toLocalDate());
		timeValues[0] = (long)Math.abs(period.getYears());
		timeValues[1] = (long)Math.abs(period.getMonths());
		timeValues[2] = (long)Math.abs(period.getDays());
		long hours = Math.abs(fDate.until(sDate, ChronoUnit.HOURS));
		if (timeValues[2] > 0 && hours / timeValues[2] < 24) {
			timeValues[2]--;
		}
		timeValues[3] = hours % 24;
		timeValues[4] = Math.abs(fDate.until(sDate, ChronoUnit.MINUTES)) % 60;
		timeValues[5] = Math.abs(fDate.until(sDate, ChronoUnit.SECONDS)) % 60;
	}

	String getResultText() {
		return String.format("%04d:%02d:%02d %02d:%02d:%02d", (Object[])timeValues);
	}

	String getVerboseResultText() {
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < timeValues.length; i++) {
			if (timeValues[i] != 0) {
				stringBuilder.append(String.format("%d %s, ", timeValues[i],
						timeValues[i] > 1 ? timeNames[i] + "s" : timeNames[i]));
			}
		}

		try {
			return stringBuilder.substring(0, stringBuilder.length() - 2);
		} catch (StringIndexOutOfBoundsException exception) {
			return "...";
		}
	}
}

class CalendarPanel extends JPanel {
	static final long serialVersionUID = 1L;

	private static final String[] monthNames = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

	private final GregorianCalendar calendar;
	private final JComboBox<String> dateBox;
	private final JComboBox<String> monthBox;
	private final JComboBox<String> yearBox;

	private final JComboBox<String> hourBox;
	private final JComboBox<String> minBox;
	private final JComboBox<String> scndBox;

	private final int epoch;

	CalendarPanel(int epoch) {
		this.epoch = epoch;
		calendar = new GregorianCalendar();
		dateBox = new JComboBox<>();
		monthBox = new JComboBox<>();
		yearBox = new JComboBox<>();

		hourBox = new JComboBox<>();
		minBox = new JComboBox<>();
		scndBox = new JComboBox<>();

		for (int i = 1; i <= calendar.getActualMaximum(Calendar.DAY_OF_MONTH); i++) {
			dateBox.addItem(String.format("%02d", i));
		}
		for (int i = 0; i <= calendar.getActualMaximum(Calendar.MONTH); i++) {
			monthBox.addItem(String.format("%02d - %s", i+1, monthNames[i]));
		}
		for (int i = epoch; i <= calendar.get(Calendar.YEAR)+1000; i++) {
			yearBox.addItem(String.format("%04d", i));
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.HOUR_OF_DAY); i++) {
			hourBox.addItem(String.format("%02d", i));
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.MINUTE); i++) {
			minBox.addItem(String.format("%02d", i));
		}
		for (int i = 0; i <= calendar.getMaximum(Calendar.SECOND); i++) {
			scndBox.addItem(String.format("%02d", i));
		}

		setBoxesToCalendar();

		dateBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.DATE, dateBox.getSelectedIndex()+1);
			}
		});
		monthBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.MONTH, monthBox.getSelectedIndex());
				checkMaximumDate();
			}
		});
		yearBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.YEAR, yearBox.getSelectedIndex()+epoch);
				checkMaximumDate();
			}
		});

		hourBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.HOUR_OF_DAY, hourBox.getSelectedIndex());
			}
		});
		minBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.MINUTE, minBox.getSelectedIndex());
			}
		});
		scndBox.addItemListener(e -> {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				calendar.set(Calendar.SECOND, scndBox.getSelectedIndex());
			}
		});

		add(dateBox);
		add(monthBox);
		add(yearBox);
		add(Box.createRigidArea(new Dimension(10, 0)));
		add(hourBox);
		add(minBox);
		add(scndBox);

		JButton nowButton = new JButton("Now");
		nowButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		nowButton.addActionListener(e -> {
			calendar.setTime(new Date());
			setBoxesToCalendar();
		});

		add(Box.createRigidArea(new Dimension(20, 0)));
		add(nowButton);
	}

	private void checkMaximumDate() {
		calendar.set(Calendar.DATE, 1);
		if (dateBox.getItemCount() > calendar.getActualMaximum(Calendar.DATE)) {
			int i = dateBox.getItemCount() - calendar.getActualMaximum(Calendar.DATE);
			for (; i > 0; i--) {
				dateBox.removeItemAt(dateBox.getItemCount()-1);
			}
		} else if (dateBox.getItemCount() < calendar.getActualMaximum(Calendar.DATE)) {
			for (int i = dateBox.getItemCount()+1; i <= calendar.getActualMaximum(Calendar.DATE); i++) {
				dateBox.addItem(String.format("%02d", i));
			}
		}
		calendar.set(Calendar.DATE, dateBox.getSelectedIndex()+1);
	}

	private void setBoxesToCalendar() {
		dateBox.setSelectedIndex(calendar.get(Calendar.DATE)-1);
		monthBox.setSelectedIndex(calendar.get(Calendar.MONTH));
		yearBox.setSelectedIndex(calendar.get(Calendar.YEAR)-epoch);
		hourBox.setSelectedIndex(calendar.get(Calendar.HOUR_OF_DAY));
		minBox.setSelectedIndex(calendar.get(Calendar.MINUTE));
		scndBox.setSelectedIndex(calendar.get(Calendar.SECOND));
	}

	long getTimeInMillis() {
		return calendar.getTime().getTime();
	}

	Date getDate() {
		return calendar.getTime();
	}

	LocalDateTime getLocalDateTime() {
		return LocalDateTime.of(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH), 
			calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND)/*, calendar.get(Calendar.MILLISECOND) * 1000000*/);
	}
}

class CenterLabel extends JLabel {
	static final long serialVersionUID = 1L;

	CenterLabel(String text) {
		super(text);
		setAlignmentX(Component.CENTER_ALIGNMENT);
	}
}